package org.parker.elfutils.readelf;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.sun.xml.internal.messaging.saaj.util.ByteOutputStream;
import org.parker.elfutils.Elf;

import javax.swing.*;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import java.awt.*;
import java.io.File;
import java.io.PrintStream;

import static org.parker.elfutils.readelf.ReadElfTree.node;

public class ElfGUI {

    private JPanel panel1;
    private JButton button1;
    private JTree tree1;
    private JLabel filepath;

    public static void main(String... args) throws Exception {
        ElfGUI e = new ElfGUI();
        //e.tree1.setModel(new DefaultTreeModel(ReadElfTree.readElf(new Elf())));
        e.loadElf(new File("U:\\home\\parker\\testCode\\gdbTest\\a.out"));
        JFrame frame = new JFrame();
        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        frame.setContentPane(e.$$$getRootComponent$$$());
        frame.pack();
        frame.setVisible(true);
    }

    public ElfGUI() {
        button1.addActionListener(e -> {
            try {
                loadElf(null);
            } catch (Exception ioException) {
                throw new RuntimeException(ioException);
            }
        });
    }

    public void loadElf(File f) throws Exception {
        try {
            if (f == null) {
                JFileChooser fc = new JFileChooser();
                fc.showDialog($$$getRootComponent$$$(), "select");
                f = fc.getSelectedFile();
            }
            filepath.setText(f.getAbsolutePath());
            DefaultMutableTreeNode tree = ReadElfTree.readElf(new Elf(f));
            tree1.setModel(new DefaultTreeModel(tree) {
                @Override
                public Object getChild(Object parent, int index) {
                    if (parent instanceof DefaultMutableTreeNode) {
                        if (((DefaultMutableTreeNode) parent).getChildAt(index).getChildCount() == 1) {
                            if (((DefaultMutableTreeNode) parent).getChildAt(index).getChildAt(0).isLeaf()) {
                                return ReadElfTree.node(
                                        ((DefaultMutableTreeNode) parent).getChildAt(index).toString() + ": " + ((DefaultMutableTreeNode) parent).getChildAt(index).getChildAt(0),
                                        ((DefaultMutableTreeNode) parent).getChildAt(index).getChildAt(0));
                            }
                        }
                    }
                    return super.getChild(parent, index);
                }
            });
        } catch (Exception ex) {
            ByteOutputStream bo = new ByteOutputStream();
            PrintStream ps = new PrintStream(bo);
            ex.printStackTrace(ps);

            JOptionPane.showMessageDialog($$$getRootComponent$$$(), "Error opening file: \n" + new String(bo.getBytes()));
            throw ex;
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        button1 = new JButton();
        button1.setText("Open File");
        panel2.add(button1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(79, 30), null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new BorderLayout(0, 0));
        panel2.add(panel3, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("File Path: ");
        panel3.add(label1, BorderLayout.WEST);
        filepath = new JLabel();
        filepath.setText("");
        panel3.add(filepath, BorderLayout.CENTER);
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new BorderLayout(0, 0));
        panel1.add(panel4, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel4.add(scrollPane1, BorderLayout.CENTER);
        tree1 = new JTree();
        scrollPane1.setViewportView(tree1);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

}
