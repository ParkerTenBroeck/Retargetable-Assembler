// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/java/org/parker/retargetableassembler/pipe/preprocessor/lex/jflex/AssemblerScanner.jflex

package org.parker.retargetableassembler.pipe.preprocessor.lex.jflex;
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Copyright (C) 2001       Gerwin Klein <lsf@jflex.de>                    *
 * Copyright (C) 2001       Bernhard Rumpe <rumpe@in.tum.de>               *
 * All rights reserved.                                                    *
 *                                                                         *
 * License: BSD                                                            *
 *                                                                         *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */


import org.parker.retargetableassembler.pipe.preprocessor.lex.cup.AssemblerSym;
import java.io.File;
import java.util.Iterator;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class AssemblerScanner implements AssemblerSym, Iterator<LexSymbol> {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\6\1\7\1\0\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\0"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\5\10\1\52"+
    "\5\10\1\53\1\54\1\55\1\56\2\10\1\57\2\10"+
    "\1\60\1\61\1\62\1\63\1\10\1\0\1\64\1\65"+
    "\1\46\1\47\1\66\1\67\5\10\1\70\1\10\1\71"+
    "\3\10\1\72\1\73\1\74\1\75\2\10\1\57\2\10"+
    "\1\76\1\77\1\100\1\101\6\0\1\3\u01a2\0\2\3"+
    "\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\2\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\2\6\1\31\1\32\1\33\1\34\2\6\1\35"+
    "\1\36\1\37\1\40\1\41\2\42\1\43\2\1\2\44"+
    "\1\1\1\45\1\46\1\47\1\50\2\51\1\52\1\53"+
    "\1\54\1\55\1\0\1\56\1\57\1\0\1\3\1\60"+
    "\1\57\4\61\1\57\1\0\1\62\1\0\1\63\1\64"+
    "\1\0\2\3\1\65\1\66\1\67\1\70\1\71\2\6"+
    "\1\72\2\6\1\73\1\74\1\75\1\76\1\77\2\100"+
    "\1\101\1\102\1\103\1\104\1\105\1\106\1\107\13\110"+
    "\1\0\1\62\1\6\1\63\1\0\1\111\2\61\2\112"+
    "\1\0\1\57\2\113\1\114\1\115\1\116\4\6\1\100"+
    "\1\117\1\120\1\121\2\0\1\122\1\123\1\124\1\125"+
    "\1\126\1\127\1\0\1\57\2\61\1\130\1\112\1\131"+
    "\1\113\1\132\1\6\1\133\1\6\1\0\2\61\1\112"+
    "\1\113\1\134\1\0\2\61\1\112\1\113\1\0\2\61"+
    "\1\112\1\113\1\0\2\61\1\112\1\113\1\0\2\61"+
    "\1\112\1\113\1\0\2\61\1\112\1\113\1\135\2\61"+
    "\1\112\1\0\2\61\1\112\1\0\2\61\1\112\1\0"+
    "\2\61\1\112\1\0\2\61\1\112\1\0\2\61\1\112"+
    "\1\0\1\61\1\57\1\112\1\0\1\57\1\112\1\0"+
    "\1\57\1\112\1\57\1\112\1\57\1\112\1\57\15\112"+
    "\40\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[274];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\306\0\u0108\0\u014a\0\306"+
    "\0\u018c\0\u01ce\0\u0210\0\u0252\0\306\0\306\0\u0294\0\u02d6"+
    "\0\306\0\u0318\0\u035a\0\u039c\0\u03de\0\u0420\0\306\0\u0462"+
    "\0\u04a4\0\u04e6\0\u0528\0\306\0\u056a\0\u05ac\0\306\0\u0252"+
    "\0\306\0\u05ee\0\u0630\0\u0672\0\306\0\u06b4\0\306\0\306"+
    "\0\u06f6\0\306\0\u0738\0\306\0\u077a\0\u07bc\0\306\0\u07fe"+
    "\0\u0840\0\306\0\306\0\306\0\306\0\306\0\u0882\0\306"+
    "\0\306\0\306\0\306\0\u08c4\0\306\0\u0906\0\u0948\0\306"+
    "\0\306\0\u098a\0\u09cc\0\u0a0e\0\u0a50\0\u0a92\0\u0ad4\0\u0b16"+
    "\0\306\0\u0b58\0\306\0\306\0\u0b9a\0\u0462\0\u0bdc\0\u0c1e"+
    "\0\306\0\306\0\306\0\u0c60\0\u0ca2\0\u0ce4\0\306\0\u0d26"+
    "\0\u0d68\0\306\0\306\0\306\0\306\0\306\0\u0daa\0\u0dec"+
    "\0\306\0\306\0\306\0\306\0\306\0\306\0\306\0\306"+
    "\0\u0e2e\0\u0e70\0\u0eb2\0\u0ef4\0\u0f36\0\u0f78\0\u0fba\0\u0ffc"+
    "\0\u103e\0\u1080\0\u10c2\0\u018c\0\u1104\0\u018c\0\u1146\0\306"+
    "\0\u1188\0\u11ca\0\u120c\0\u124e\0\u1290\0\u12d2\0\u1314\0\u1356"+
    "\0\306\0\306\0\u1398\0\u13da\0\u141c\0\u145e\0\u14a0\0\306"+
    "\0\306\0\306\0\306\0\u0ef4\0\u14e2\0\306\0\306\0\306"+
    "\0\306\0\306\0\306\0\u1524\0\u1566\0\u15a8\0\u15ea\0\306"+
    "\0\u162c\0\306\0\u166e\0\306\0\u16b0\0\u018c\0\u16f2\0\u1734"+
    "\0\u1776\0\u17b8\0\u17fa\0\u183c\0\u018c\0\u187e\0\u18c0\0\u1902"+
    "\0\u1944\0\u1986\0\u19c8\0\u1a0a\0\u1a4c\0\u1a8e\0\u1ad0\0\u1b12"+
    "\0\u1b54\0\u1b96\0\u1bd8\0\u1c1a\0\u1c5c\0\u1c9e\0\u1ce0\0\u1d22"+
    "\0\u1d64\0\u1da6\0\u1de8\0\u1e2a\0\u1e6c\0\u1eae\0\306\0\u1ef0"+
    "\0\u1f32\0\u1f74\0\u1fb6\0\u1ff8\0\u203a\0\u207c\0\u20be\0\u2100"+
    "\0\u2142\0\u2184\0\u21c6\0\u2208\0\u224a\0\u228c\0\u22ce\0\u2310"+
    "\0\u2352\0\u2394\0\u23d6\0\u2418\0\u245a\0\u249c\0\u24de\0\u2520"+
    "\0\u2520\0\u2562\0\u25a4\0\u25e6\0\u2628\0\u266a\0\u26ac\0\u26ee"+
    "\0\u2730\0\u2772\0\u27b4\0\u27f6\0\u2838\0\u287a\0\u28bc\0\u28fe"+
    "\0\u2940\0\u2982\0\u29c4\0\u2a06\0\u2a48\0\u2a8a\0\u2acc\0\u2b0e"+
    "\0\u2b50\0\u2b92\0\u2bd4\0\u2c16\0\u2c58\0\u2c9a\0\u2cdc\0\u2d1e"+
    "\0\u2d60\0\u2da2\0\u2de4\0\u2e26\0\u2e68\0\u2eaa\0\u2eec\0\u2f2e"+
    "\0\u2f70\0\u2fb2\0\u2ff4\0\u3036\0\u3078\0\u30ba\0\u30fc\0\u313e"+
    "\0\u3180\0\u31c2\0\u3204\0\u3246\0\u3288\0\u32ca\0\u330c\0\u334e"+
    "\0\u3390\0\u33d2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[274];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\11\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\5\11\1\35\3\11\1\36"+
    "\2\11\1\37\1\40\1\41\1\42\3\11\1\43\4\11"+
    "\1\44\1\11\1\45\1\46\1\47\1\50\2\51\1\52"+
    "\2\51\1\53\1\51\1\54\51\51\1\55\20\51\2\56"+
    "\1\57\2\56\1\60\5\56\1\4\45\56\1\61\20\56"+
    "\104\0\1\6\2\0\1\6\135\0\1\62\50\0\1\11"+
    "\11\0\1\11\1\0\12\11\6\0\14\11\4\0\12\11"+
    "\45\0\1\63\52\0\1\64\26\0\1\65\42\0\1\66"+
    "\2\0\1\67\135\0\1\70\57\0\1\71\21\0\1\72"+
    "\61\0\1\73\4\0\1\74\12\0\1\75\50\0\1\11"+
    "\11\0\1\11\1\0\12\76\6\0\14\11\4\0\12\11"+
    "\22\0\1\77\4\0\1\100\15\0\1\101\62\0\1\102"+
    "\1\0\1\103\1\104\2\105\4\106\2\107\7\0\1\110"+
    "\1\0\1\111\1\112\1\113\1\114\4\0\1\115\5\0"+
    "\1\110\1\112\1\113\1\114\33\0\1\102\1\0\12\26"+
    "\11\0\1\111\1\112\1\113\1\114\13\0\1\112\1\113"+
    "\1\114\11\0\2\116\1\100\2\116\1\117\74\116\40\0"+
    "\1\120\1\121\101\0\1\122\101\0\1\123\1\124\47\0"+
    "\1\11\11\0\1\11\1\0\12\11\6\0\1\125\13\11"+
    "\4\0\12\11\14\0\1\11\11\0\1\11\1\0\12\11"+
    "\6\0\7\11\1\126\4\11\4\0\12\11\45\0\1\127"+
    "\50\0\1\11\11\0\1\11\1\0\12\11\6\0\14\11"+
    "\4\0\1\130\11\11\14\0\1\11\11\0\1\11\1\0"+
    "\12\11\6\0\14\11\4\0\6\11\1\131\3\11\45\0"+
    "\1\132\35\0\1\133\2\0\2\51\1\0\2\51\1\0"+
    "\1\51\1\0\51\51\1\0\20\51\2\0\1\52\77\0"+
    "\2\134\4\0\1\134\1\135\3\134\1\136\10\134\4\137"+
    "\4\140\25\134\1\141\3\134\1\142\1\134\1\143\1\134"+
    "\1\144\1\145\1\134\1\146\5\134\13\0\1\147\70\0"+
    "\1\57\77\0\2\150\4\0\1\150\1\151\3\150\1\152"+
    "\10\150\4\153\4\154\25\150\1\155\3\150\1\156\1\150"+
    "\1\157\1\150\1\160\1\161\1\150\1\162\5\150\2\0"+
    "\1\66\124\0\1\163\64\0\1\11\11\0\1\11\1\0"+
    "\12\76\6\0\3\11\1\164\1\165\1\166\6\11\4\0"+
    "\2\11\1\165\1\166\6\11\4\0\16\77\1\167\63\77"+
    "\24\0\12\102\11\0\1\111\1\112\1\113\14\0\1\112"+
    "\1\113\34\0\1\102\1\0\1\103\1\104\2\105\4\106"+
    "\2\107\11\0\1\111\1\112\1\113\1\170\13\0\1\112"+
    "\1\113\1\170\33\0\1\102\1\0\10\106\2\107\11\0"+
    "\1\111\1\112\1\113\1\170\13\0\1\112\1\113\1\170"+
    "\33\0\1\102\1\0\10\171\2\107\11\0\1\111\1\112"+
    "\1\113\1\170\13\0\1\112\1\113\1\170\33\0\1\102"+
    "\1\0\10\172\2\107\11\0\1\111\1\112\1\113\1\170"+
    "\13\0\1\112\1\113\1\170\33\0\1\102\1\0\12\107"+
    "\11\0\1\111\1\112\1\113\14\0\1\112\1\113\36\0"+
    "\1\173\1\174\73\0\1\175\1\0\1\175\2\0\12\176"+
    "\70\0\1\177\11\200\6\0\6\200\12\0\4\200\14\0"+
    "\1\100\140\0\1\201\101\0\1\202\1\203\47\0\1\11"+
    "\11\0\1\11\1\0\12\11\6\0\6\11\1\204\5\11"+
    "\4\0\12\11\14\0\1\11\11\0\1\11\1\0\12\11"+
    "\6\0\12\11\1\205\1\11\4\0\12\11\14\0\1\11"+
    "\11\0\1\11\1\0\12\11\6\0\14\11\4\0\4\11"+
    "\1\206\5\11\14\0\1\11\11\0\1\11\1\0\12\11"+
    "\6\0\14\11\4\0\11\11\1\207\30\0\10\140\72\0"+
    "\10\210\61\0\1\211\101\0\1\212\101\0\1\213\10\0"+
    "\10\214\61\0\1\213\10\0\10\215\61\0\1\216\101\0"+
    "\1\217\101\0\1\220\101\0\1\221\101\0\1\222\101\0"+
    "\1\223\116\0\1\224\61\0\1\11\6\0\1\175\1\0"+
    "\1\175\1\11\1\0\12\225\6\0\14\11\4\0\12\11"+
    "\4\0\16\77\1\167\4\77\1\66\56\77\22\0\1\102"+
    "\1\0\10\226\2\107\11\0\1\111\1\112\1\113\1\170"+
    "\13\0\1\112\1\113\1\170\33\0\1\102\1\0\10\227"+
    "\2\107\11\0\1\111\1\112\1\113\1\170\13\0\1\112"+
    "\1\113\1\170\35\0\1\173\1\174\24\0\1\230\15\0"+
    "\1\230\35\0\2\231\24\0\1\230\15\0\1\230\35\0"+
    "\12\176\70\0\12\176\11\0\1\111\1\0\1\113\15\0"+
    "\1\113\36\0\1\177\11\200\6\0\6\200\1\232\11\0"+
    "\4\200\1\232\35\0\12\233\6\0\6\233\1\232\11\0"+
    "\4\233\1\232\52\0\1\234\50\0\1\11\11\0\1\11"+
    "\1\0\12\11\6\0\10\11\1\235\3\11\4\0\12\11"+
    "\14\0\1\11\11\0\1\11\1\0\12\11\6\0\4\11"+
    "\1\236\7\11\4\0\12\11\14\0\1\11\11\0\1\11"+
    "\1\0\12\11\6\0\14\11\4\0\7\11\1\237\2\11"+
    "\14\0\1\11\11\0\1\11\1\0\12\11\6\0\14\11"+
    "\4\0\2\11\1\236\7\11\17\0\1\213\121\0\1\240"+
    "\56\0\1\11\11\0\1\11\1\0\12\225\6\0\3\11"+
    "\1\164\1\11\1\166\6\11\4\0\3\11\1\166\6\11"+
    "\26\0\1\102\1\0\10\241\2\107\11\0\1\111\1\112"+
    "\1\113\1\170\13\0\1\112\1\113\1\170\33\0\1\102"+
    "\1\0\10\242\2\107\11\0\1\111\1\112\1\113\1\170"+
    "\13\0\1\112\1\113\1\170\35\0\2\243\24\0\1\230"+
    "\15\0\1\230\35\0\12\244\6\0\6\244\1\232\11\0"+
    "\4\244\1\232\21\0\1\11\11\0\1\11\1\0\12\11"+
    "\6\0\4\11\1\245\7\11\4\0\12\11\14\0\1\11"+
    "\11\0\1\11\1\0\12\11\6\0\14\11\4\0\2\11"+
    "\1\245\7\11\34\0\1\246\73\0\1\102\1\0\10\247"+
    "\2\107\11\0\1\111\1\112\1\113\1\170\13\0\1\112"+
    "\1\113\1\170\33\0\1\102\1\0\10\250\2\107\11\0"+
    "\1\111\1\112\1\113\1\170\13\0\1\112\1\113\1\170"+
    "\35\0\2\251\24\0\1\230\15\0\1\230\35\0\12\252"+
    "\6\0\6\252\1\232\11\0\4\252\1\232\45\0\1\253"+
    "\67\0\1\102\1\0\10\254\2\107\11\0\1\111\1\112"+
    "\1\113\1\170\13\0\1\112\1\113\1\170\33\0\1\102"+
    "\1\0\10\255\2\107\11\0\1\111\1\112\1\113\1\170"+
    "\13\0\1\112\1\113\1\170\35\0\2\256\24\0\1\230"+
    "\15\0\1\230\35\0\12\257\6\0\6\257\1\232\11\0"+
    "\4\257\1\232\40\0\1\260\74\0\1\102\1\0\10\261"+
    "\2\107\11\0\1\111\1\112\1\113\1\170\13\0\1\112"+
    "\1\113\1\170\33\0\1\102\1\0\10\262\2\107\11\0"+
    "\1\111\1\112\1\113\1\170\13\0\1\112\1\113\1\170"+
    "\35\0\2\263\24\0\1\230\15\0\1\230\35\0\12\264"+
    "\6\0\6\264\1\232\11\0\4\264\1\232\43\0\1\265"+
    "\71\0\1\102\1\0\10\266\2\107\11\0\1\111\1\112"+
    "\1\113\1\170\13\0\1\112\1\113\1\170\33\0\1\102"+
    "\1\0\10\267\2\107\11\0\1\111\1\112\1\113\1\170"+
    "\13\0\1\112\1\113\1\170\35\0\2\270\24\0\1\230"+
    "\15\0\1\230\35\0\12\271\6\0\6\271\1\232\11\0"+
    "\4\271\1\232\41\0\1\272\73\0\1\102\1\0\10\273"+
    "\2\107\11\0\1\111\1\112\1\113\1\170\13\0\1\112"+
    "\1\113\1\170\33\0\1\102\1\0\10\274\2\107\11\0"+
    "\1\111\1\112\1\113\1\170\13\0\1\112\1\113\1\170"+
    "\35\0\2\275\24\0\1\230\15\0\1\230\35\0\12\276"+
    "\6\0\6\276\1\232\11\0\4\276\1\232\45\0\1\277"+
    "\67\0\1\102\1\0\10\300\2\107\11\0\1\111\1\112"+
    "\1\113\1\170\13\0\1\112\1\113\1\170\33\0\1\102"+
    "\1\0\10\301\2\107\11\0\1\111\1\112\1\113\1\170"+
    "\13\0\1\112\1\113\1\170\35\0\2\302\24\0\1\230"+
    "\15\0\1\230\35\0\12\303\6\0\6\303\1\232\11\0"+
    "\4\303\1\232\33\0\1\102\1\0\10\304\2\107\11\0"+
    "\1\111\1\112\1\113\1\170\13\0\1\112\1\113\1\170"+
    "\33\0\1\102\1\0\10\305\2\107\11\0\1\111\1\112"+
    "\1\113\1\170\13\0\1\112\1\113\1\170\35\0\2\306"+
    "\24\0\1\230\15\0\1\230\35\0\12\307\6\0\6\307"+
    "\1\232\11\0\4\307\1\232\33\0\1\102\1\0\10\310"+
    "\2\107\11\0\1\111\1\112\1\113\1\170\13\0\1\112"+
    "\1\113\1\170\33\0\1\102\1\0\10\311\2\107\11\0"+
    "\1\111\1\112\1\113\1\170\13\0\1\112\1\113\1\170"+
    "\35\0\2\312\24\0\1\230\15\0\1\230\35\0\12\313"+
    "\6\0\6\313\1\232\11\0\4\313\1\232\33\0\1\102"+
    "\1\0\10\314\2\107\11\0\1\111\1\112\1\113\1\170"+
    "\13\0\1\112\1\113\1\170\33\0\1\102\1\0\10\315"+
    "\2\107\11\0\1\111\1\112\1\113\1\170\13\0\1\112"+
    "\1\113\1\170\35\0\2\316\24\0\1\230\15\0\1\230"+
    "\35\0\12\317\6\0\6\317\1\232\11\0\4\317\1\232"+
    "\33\0\1\102\1\0\10\320\2\107\11\0\1\111\1\112"+
    "\1\113\1\170\13\0\1\112\1\113\1\170\33\0\1\102"+
    "\1\0\10\321\2\107\11\0\1\111\1\112\1\113\1\170"+
    "\13\0\1\112\1\113\1\170\35\0\2\322\24\0\1\230"+
    "\15\0\1\230\35\0\12\323\6\0\6\323\1\232\11\0"+
    "\4\323\1\232\33\0\1\102\1\0\10\324\2\107\11\0"+
    "\1\111\1\112\1\113\1\170\13\0\1\112\1\113\1\170"+
    "\33\0\1\102\1\0\10\325\2\107\11\0\1\111\1\112"+
    "\1\113\1\170\13\0\1\112\1\113\1\170\35\0\2\326"+
    "\24\0\1\230\15\0\1\230\35\0\12\327\6\0\6\327"+
    "\1\232\11\0\4\327\1\232\33\0\1\102\1\0\10\330"+
    "\2\107\11\0\1\111\1\112\1\113\1\170\13\0\1\112"+
    "\1\113\1\170\33\0\1\102\1\0\10\331\2\107\11\0"+
    "\1\111\1\112\1\113\1\170\13\0\1\112\1\113\1\170"+
    "\35\0\2\332\24\0\1\230\15\0\1\230\35\0\12\333"+
    "\6\0\6\333\1\232\11\0\4\333\1\232\33\0\1\102"+
    "\1\0\10\334\2\107\11\0\1\111\1\112\1\113\1\170"+
    "\13\0\1\112\1\113\1\170\35\0\2\335\24\0\1\230"+
    "\15\0\1\230\35\0\12\336\6\0\6\336\1\232\11\0"+
    "\4\336\1\232\33\0\1\102\1\0\10\337\2\107\11\0"+
    "\1\111\1\112\1\113\1\170\13\0\1\112\1\113\1\170"+
    "\35\0\2\340\24\0\1\230\15\0\1\230\63\0\1\232"+
    "\15\0\1\232\33\0\1\102\1\0\10\341\2\107\11\0"+
    "\1\111\1\112\1\113\1\170\13\0\1\112\1\113\1\170"+
    "\35\0\2\342\24\0\1\230\15\0\1\230\33\0\1\102"+
    "\1\0\10\343\2\107\11\0\1\111\1\112\1\113\1\170"+
    "\13\0\1\112\1\113\1\170\35\0\2\344\24\0\1\230"+
    "\15\0\1\230\33\0\1\102\1\0\10\345\2\107\11\0"+
    "\1\111\1\112\1\113\1\170\13\0\1\112\1\113\1\170"+
    "\35\0\2\346\24\0\1\230\15\0\1\230\33\0\1\102"+
    "\1\0\12\107\11\0\1\111\1\112\1\113\1\170\13\0"+
    "\1\112\1\113\1\170\35\0\2\347\24\0\1\230\15\0"+
    "\1\230\35\0\2\350\24\0\1\230\15\0\1\230\35\0"+
    "\2\351\24\0\1\230\15\0\1\230\35\0\2\352\24\0"+
    "\1\230\15\0\1\230\35\0\2\353\24\0\1\230\15\0"+
    "\1\230\35\0\2\354\24\0\1\230\15\0\1\230\35\0"+
    "\2\355\24\0\1\230\15\0\1\230\35\0\2\356\24\0"+
    "\1\230\15\0\1\230\35\0\2\357\24\0\1\230\15\0"+
    "\1\230\35\0\2\360\24\0\1\230\15\0\1\230\35\0"+
    "\2\361\24\0\1\230\15\0\1\230\35\0\2\362\24\0"+
    "\1\230\15\0\1\230\35\0\2\363\24\0\1\230\15\0"+
    "\1\230\35\0\2\364\24\0\1\230\15\0\1\230\35\0"+
    "\2\365\24\0\1\230\15\0\1\230\35\0\2\366\24\0"+
    "\1\230\15\0\1\230\35\0\2\367\24\0\1\230\15\0"+
    "\1\230\35\0\2\370\24\0\1\230\15\0\1\230\35\0"+
    "\2\371\24\0\1\230\15\0\1\230\35\0\2\372\24\0"+
    "\1\230\15\0\1\230\35\0\2\373\24\0\1\230\15\0"+
    "\1\230\35\0\2\374\24\0\1\230\15\0\1\230\35\0"+
    "\2\375\24\0\1\230\15\0\1\230\35\0\2\376\24\0"+
    "\1\230\15\0\1\230\35\0\2\377\24\0\1\230\15\0"+
    "\1\230\35\0\2\u0100\24\0\1\230\15\0\1\230\35\0"+
    "\2\u0101\24\0\1\230\15\0\1\230\35\0\2\u0102\24\0"+
    "\1\230\15\0\1\230\35\0\2\u0103\24\0\1\230\15\0"+
    "\1\230\35\0\2\u0104\24\0\1\230\15\0\1\230\35\0"+
    "\2\u0105\24\0\1\230\15\0\1\230\35\0\2\u0106\24\0"+
    "\1\230\15\0\1\230\35\0\2\u0107\24\0\1\230\15\0"+
    "\1\230\35\0\2\u0108\24\0\1\230\15\0\1\230\35\0"+
    "\2\u0109\24\0\1\230\15\0\1\230\35\0\2\u010a\24\0"+
    "\1\230\15\0\1\230\35\0\2\u010b\24\0\1\230\15\0"+
    "\1\230\35\0\2\u010c\24\0\1\230\15\0\1\230\35\0"+
    "\2\u010d\24\0\1\230\15\0\1\230\35\0\2\u010e\24\0"+
    "\1\230\15\0\1\230\35\0\2\u010f\24\0\1\230\15\0"+
    "\1\230\35\0\2\u0110\24\0\1\230\15\0\1\230\35\0"+
    "\2\u0111\24\0\1\230\15\0\1\230\35\0\2\u0112\24\0"+
    "\1\230\15\0\1\230\63\0\1\230\15\0\1\230\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13332];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\2\1\1\11\4\1\2\11\2\1\1\11"+
    "\5\1\1\11\4\1\1\11\2\1\1\11\1\1\1\11"+
    "\3\1\1\11\1\1\2\11\1\1\1\11\1\1\1\11"+
    "\2\1\1\11\2\1\5\11\1\1\4\11\1\0\1\11"+
    "\1\1\1\0\2\11\6\1\1\0\1\11\1\0\2\11"+
    "\1\0\3\1\3\11\3\1\1\11\2\1\5\11\2\1"+
    "\10\11\12\1\1\0\3\1\1\0\1\11\4\1\1\0"+
    "\3\1\2\11\5\1\4\11\2\0\6\11\1\0\3\1"+
    "\1\11\1\1\1\11\1\1\1\11\3\1\1\0\5\1"+
    "\1\0\4\1\1\0\4\1\1\0\4\1\1\0\4\1"+
    "\1\0\4\1\1\11\3\1\1\0\3\1\1\0\3\1"+
    "\1\0\3\1\1\0\3\1\1\0\3\1\1\0\3\1"+
    "\1\0\2\1\1\0\24\1\40\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[274];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  private StringBuilder string = new StringBuilder();
  private int columnStringStart = 0;
  private long charStringStart = 0;
  private File parentFile = null;
  private boolean includeWhiteSpace = true;

  private LexSymbol symbol(int type) {
    return new LexSymbol(parentFile, type, yyline, yycolumn, yychar, yylength());
  }

  public LexSymbol next(){
      try{
          return next_token();
      }catch (Exception e){
          throw new RuntimeException(e);
      }
  }

  public boolean hasNext(){
      return !yyatEOF();
  }

  private LexSymbol symbol(int type, Object value) {
    return new LexSymbol(parentFile, type, yyline, yycolumn, yychar,yylength(), value);
  }

    private LexSymbol symbol(int type, int line, int column, long charPos, int size, Object value) {
      return new LexSymbol(parentFile, type, line, column, charPos, size, value);
    }

  public AssemblerScanner(java.io.Reader in, File parentFile) {
    this(in, parentFile, false);
  }

    public AssemblerScanner(java.io.Reader in, File parentFile, boolean includeWhiteSpace) {
      this(in);
      this.parentFile = parentFile;
      this.includeWhiteSpace = includeWhiteSpace;
    }

  

  /**
   * assumes correct representation of a long value for
   * specified radix in scanner buffer from <code>start</code>
   * to <code>end</code>
   */
  private long parseLong(int start, int end, int radix) {
    long result = 0;
    long digit;

    for (int i = start; i < end; i++) {
      digit  = Character.digit(yycharat(i),radix);
      result*= radix;
      result+= digit;
    }

    return result;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AssemblerScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public LexSymbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return symbol(EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yybegin(YYINITIAL); return symbol(error, yyline, yycolumn, yychar, yylength(), "Illegal character \""+yytext()+
                                                              "\" at line "+(yyline + 1)+", column "+(yycolumn + 1));
            }
            // fall through
          case 94: break;
          case 2:
            { if(includeWhiteSpace)return symbol(WHITESPACE);
            }
            // fall through
          case 95: break;
          case 3:
            { return symbol(LINE_TERMINATOR);
            }
            // fall through
          case 96: break;
          case 4:
            { return symbol(NOT);
            }
            // fall through
          case 97: break;
          case 5:
            { yybegin(STRING); string.setLength(0); columnStringStart = yycolumn; charStringStart = yychar;
            }
            // fall through
          case 98: break;
          case 6:
            { return symbol(IDENTIFIER, yytext());
            }
            // fall through
          case 99: break;
          case 7:
            { return symbol(MOD);
            }
            // fall through
          case 100: break;
          case 8:
            { return symbol(AND);
            }
            // fall through
          case 101: break;
          case 9:
            { yybegin(CHARLITERAL);
            }
            // fall through
          case 102: break;
          case 10:
            { return symbol(LPAREN);
            }
            // fall through
          case 103: break;
          case 11:
            { return symbol(RPAREN);
            }
            // fall through
          case 104: break;
          case 12:
            { return symbol(MULT);
            }
            // fall through
          case 105: break;
          case 13:
            { return symbol(PLUS);
            }
            // fall through
          case 106: break;
          case 14:
            { return symbol(COMMA);
            }
            // fall through
          case 107: break;
          case 15:
            { return symbol(MINUS);
            }
            // fall through
          case 108: break;
          case 16:
            { return symbol(DOT);
            }
            // fall through
          case 109: break;
          case 17:
            { return symbol(DIV);
            }
            // fall through
          case 110: break;
          case 18:
            { return symbol(INTEGER_LITERAL, Integer.valueOf(yytext()));
            }
            // fall through
          case 111: break;
          case 19:
            { return symbol(COLON);
            }
            // fall through
          case 112: break;
          case 20:
            { return symbol(SEMICOLON);
            }
            // fall through
          case 113: break;
          case 21:
            { return symbol(LT);
            }
            // fall through
          case 114: break;
          case 22:
            { return symbol(EQ);
            }
            // fall through
          case 115: break;
          case 23:
            { return symbol(GT);
            }
            // fall through
          case 116: break;
          case 24:
            { return symbol(QUESTION);
            }
            // fall through
          case 117: break;
          case 25:
            { return symbol(LBRACK);
            }
            // fall through
          case 118: break;
          case 26:
            { return symbol(BACKSLASH);
            }
            // fall through
          case 119: break;
          case 27:
            { return symbol(RBRACK);
            }
            // fall through
          case 120: break;
          case 28:
            { return symbol(XOR);
            }
            // fall through
          case 121: break;
          case 29:
            { return symbol(LBRACE);
            }
            // fall through
          case 122: break;
          case 30:
            { return symbol(OR);
            }
            // fall through
          case 123: break;
          case 31:
            { return symbol(RBRACE);
            }
            // fall through
          case 124: break;
          case 32:
            { return symbol(COMP);
            }
            // fall through
          case 125: break;
          case 33:
            { string.append( yytext() );
            }
            // fall through
          case 126: break;
          case 34:
            { yybegin(YYINITIAL); return symbol(error, yyline, columnStringStart, charStringStart, yycolumn - columnStringStart + 1 , "Unterminated string at end of line");
            }
            // fall through
          case 127: break;
          case 35:
            { yybegin(YYINITIAL); return symbol(STRING_LITERAL, yyline, columnStringStart, charStringStart, yycolumn - columnStringStart + 1 , string.toString());
            }
            // fall through
          case 128: break;
          case 36:
            { yybegin(YYINITIAL); return symbol(error, yyline, yycolumn - 1, yychar - 1, yylength() + 1, "Unterminated character literal at end of line");
            }
            // fall through
          case 129: break;
          case 37:
            { return symbol(NOTEQ);
            }
            // fall through
          case 130: break;
          case 38:
            { return symbol(MODEQ);
            }
            // fall through
          case 131: break;
          case 39:
            { return symbol(ANDAND);
            }
            // fall through
          case 132: break;
          case 40:
            { return symbol(ANDEQ);
            }
            // fall through
          case 133: break;
          case 41:
            { /* ignore */
            }
            // fall through
          case 134: break;
          case 42:
            { return symbol(MULTEQ);
            }
            // fall through
          case 135: break;
          case 43:
            { return symbol(PLUSPLUS);
            }
            // fall through
          case 136: break;
          case 44:
            { return symbol(PLUSEQ);
            }
            // fall through
          case 137: break;
          case 45:
            { return symbol(MINUSMINUS);
            }
            // fall through
          case 138: break;
          case 46:
            { return symbol(MINUSEQ);
            }
            // fall through
          case 139: break;
          case 47:
            { return symbol(FLOATING_POINT_LITERAL, new Double(yytext()));
            }
            // fall through
          case 140: break;
          case 48:
            { return symbol(DIVEQ);
            }
            // fall through
          case 141: break;
          case 49:
            { return symbol(INTEGER_LITERAL, Integer.valueOf((int) parseLong(0, yylength(), 8)));
            }
            // fall through
          case 142: break;
          case 50:
            { return symbol(FLOATING_POINT_LITERAL, new Double(yytext().substring(0,yylength()-1)));
            }
            // fall through
          case 143: break;
          case 51:
            { return symbol(FLOATING_POINT_LITERAL, new Float(yytext().substring(0,yylength()-1)));
            }
            // fall through
          case 144: break;
          case 52:
            { return symbol(INTEGER_LITERAL, new Long(yytext().substring(0,yylength()-1)));
            }
            // fall through
          case 145: break;
          case 53:
            { return symbol(LSHIFT);
            }
            // fall through
          case 146: break;
          case 54:
            { return symbol(LTEQ);
            }
            // fall through
          case 147: break;
          case 55:
            { return symbol(EQEQ);
            }
            // fall through
          case 148: break;
          case 56:
            { return symbol(GTEQ);
            }
            // fall through
          case 149: break;
          case 57:
            { return symbol(RSHIFT);
            }
            // fall through
          case 150: break;
          case 58:
            { return symbol(XOREQ);
            }
            // fall through
          case 151: break;
          case 59:
            { return symbol(OREQ);
            }
            // fall through
          case 152: break;
          case 60:
            { return symbol(OROR);
            }
            // fall through
          case 153: break;
          case 61:
            { yybegin(YYINITIAL); return symbol(error, yyline, columnStringStart, charStringStart, yycolumn - columnStringStart + 1 , "Illegal escape sequence \""+yytext()+"\"");
            }
            // fall through
          case 154: break;
          case 62:
            { string.append( '\"' );
            }
            // fall through
          case 155: break;
          case 63:
            { string.append( '\'' );
            }
            // fall through
          case 156: break;
          case 64:
            { char val = (char) Integer.parseInt(yytext().substring(1),8);
                        				   string.append( val );
            }
            // fall through
          case 157: break;
          case 65:
            { string.append( '\\' );
            }
            // fall through
          case 158: break;
          case 66:
            { string.append( '\b' );
            }
            // fall through
          case 159: break;
          case 67:
            { string.append( '\f' );
            }
            // fall through
          case 160: break;
          case 68:
            { string.append( '\n' );
            }
            // fall through
          case 161: break;
          case 69:
            { string.append( '\r' );
            }
            // fall through
          case 162: break;
          case 70:
            { string.append( '\t' );
            }
            // fall through
          case 163: break;
          case 71:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, yyline, yycolumn - 1, yychar - 1, yylength() + 1, yytext().charAt(0));
            }
            // fall through
          case 164: break;
          case 72:
            { yybegin(YYINITIAL); return symbol(error, yyline, yycolumn - 1, yychar - 1, yylength() + 1,  "Illegal escape sequence \""+yytext()+"\"");
            }
            // fall through
          case 165: break;
          case 73:
            { return symbol(INTEGER_LITERAL, new Long(parseLong(0, yylength()-1, 8)));
            }
            // fall through
          case 166: break;
          case 74:
            { return symbol(INTEGER_LITERAL, Integer.valueOf((int) parseLong(2, yylength(), 2)));
            }
            // fall through
          case 167: break;
          case 75:
            { return symbol(INTEGER_LITERAL, Integer.valueOf((int) parseLong(2, yylength(), 16)));
            }
            // fall through
          case 168: break;
          case 76:
            { return symbol(LSHIFTEQ);
            }
            // fall through
          case 169: break;
          case 77:
            { return symbol(RSHIFTEQ);
            }
            // fall through
          case 170: break;
          case 78:
            { return symbol(URSHIFT);
            }
            // fall through
          case 171: break;
          case 79:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, yyline, yycolumn - 1, yychar - 1, yylength() + 1, '\"');
            }
            // fall through
          case 172: break;
          case 80:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, yyline, yycolumn - 1, yychar - 1, yylength() + 1, '\'');
            }
            // fall through
          case 173: break;
          case 81:
            { yybegin(YYINITIAL);
			                              int val = Integer.parseInt(yytext().substring(1,yylength()-1),8);
			                            return symbol(CHARACTER_LITERAL, yyline, yycolumn - 1, yychar - 1, yylength() + 1, (char)val);
            }
            // fall through
          case 174: break;
          case 82:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, yyline, yycolumn - 1, yychar - 1, yylength() + 1, '\\');
            }
            // fall through
          case 175: break;
          case 83:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, yyline, yycolumn - 1, yychar - 1, yylength() + 1, '\b');
            }
            // fall through
          case 176: break;
          case 84:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, yyline, yycolumn - 1, yychar - 1, yylength() + 1, '\f');
            }
            // fall through
          case 177: break;
          case 85:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, yyline, yycolumn - 1, yychar - 1, yylength() + 1, '\n');
            }
            // fall through
          case 178: break;
          case 86:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, yyline, yycolumn - 1, yychar - 1, yylength() + 1, '\r');
            }
            // fall through
          case 179: break;
          case 87:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, yyline, yycolumn - 1, yychar - 1, yylength() + 1, '\t');
            }
            // fall through
          case 180: break;
          case 88:
            { return symbol(INTEGER_LITERAL, new Long(parseLong(2, yylength()-1, 2)));
            }
            // fall through
          case 181: break;
          case 89:
            { return symbol(INTEGER_LITERAL, new Long(parseLong(2, yylength()-1, 16)));
            }
            // fall through
          case 182: break;
          case 90:
            { return symbol(URSHIFTEQ);
            }
            // fall through
          case 183: break;
          case 91:
            { return symbol(BOOLEAN_LITERAL, true);
            }
            // fall through
          case 184: break;
          case 92:
            { return symbol(BOOLEAN_LITERAL, false);
            }
            // fall through
          case 185: break;
          case 93:
            { return symbol(INTEGER_LITERAL, Integer.valueOf(Integer.MIN_VALUE));
            }
            // fall through
          case 186: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
