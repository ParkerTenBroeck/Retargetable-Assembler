// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/java/org/parker/retargetableassembler/pipe/preprocessor/lex/jflex/AssemblerScanner.jflex

package org.parker.retargetableassembler.pipe.preprocessor.lex.jflex;
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Copyright (C) 2001       Gerwin Klein <lsf@jflex.de>                    *
 * Copyright (C) 2001       Bernhard Rumpe <rumpe@in.tum.de>               *
 * All rights reserved.                                                    *
 *                                                                         *
 * License: BSD                                                            *
 *                                                                         *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */


import org.parker.retargetableassembler.pipe.preprocessor.lex.cup.AssemblerSym;
import java.io.File;
import java.util.Iterator;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class AssemblerScanner implements AssemblerSym, Iterator<LexSymbol> {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\6\1\7\1\0\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\0"+
    "\1\44\2\45\1\46\1\47\1\50\5\10\1\51\5\10"+
    "\1\52\1\53\1\54\1\55\2\10\1\56\2\10\1\57"+
    "\1\60\1\61\1\62\1\10\1\0\1\63\1\64\1\45"+
    "\1\46\1\65\1\66\5\10\1\67\1\10\1\70\3\10"+
    "\1\71\1\72\1\73\1\74\2\10\1\56\2\10\1\75"+
    "\1\76\1\77\1\100\6\0\1\3\u01a2\0\2\3\326\0"+
    "\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\2\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\2\6\1\31\1\1\1\32\1\33\2\6\1\34"+
    "\1\35\1\36\1\37\1\40\2\41\1\42\2\1\2\43"+
    "\1\1\1\44\1\45\1\46\1\47\2\50\1\51\1\52"+
    "\1\53\1\54\1\0\1\55\1\56\1\0\1\50\1\57"+
    "\4\60\1\56\1\61\1\0\1\62\1\63\1\0\1\64"+
    "\1\65\1\66\1\67\1\70\2\6\1\71\2\6\1\72"+
    "\1\73\1\74\1\75\1\76\2\77\1\100\1\101\1\102"+
    "\1\103\1\104\1\105\1\106\12\74\2\0\1\107\2\60"+
    "\1\0\1\56\2\110\1\111\1\112\1\113\4\6\1\77"+
    "\1\114\1\115\1\116\2\0\1\117\1\120\1\121\1\122"+
    "\1\123\1\124\1\0\2\60\1\125\1\110\1\126\1\6"+
    "\1\127\1\6\1\0\2\60\1\110\1\130\1\0\2\60"+
    "\1\110\1\0\2\60\1\110\1\0\2\60\1\110\1\0"+
    "\2\60\1\110\1\0\2\60\1\110\1\131\2\60\1\0"+
    "\2\60\1\0\2\60\1\0\2\60\1\0\2\60\1\0"+
    "\2\60\1\0\1\60\1\56\1\0\1\56\1\0\4\56";

  private static int [] zzUnpackAction() {
    int [] result = new int[199];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\303\0\u0104\0\u0145\0\303"+
    "\0\u0186\0\u01c7\0\u0208\0\u0249\0\303\0\303\0\u028a\0\u02cb"+
    "\0\303\0\u030c\0\u034d\0\u038e\0\u03cf\0\u0410\0\303\0\303"+
    "\0\u0451\0\u0492\0\u04d3\0\303\0\u0514\0\u0555\0\303\0\u0249"+
    "\0\303\0\u0596\0\u05d7\0\u0618\0\303\0\u0659\0\303\0\303"+
    "\0\u069a\0\303\0\u06db\0\303\0\u071c\0\u075d\0\303\0\u079e"+
    "\0\u07df\0\303\0\303\0\303\0\303\0\303\0\u0820\0\303"+
    "\0\303\0\303\0\303\0\u0861\0\303\0\u08a2\0\u08e3\0\u0924"+
    "\0\303\0\u0965\0\u09a6\0\u09e7\0\u0a28\0\u0a69\0\303\0\u0aaa"+
    "\0\303\0\303\0\u0aeb\0\u0b2c\0\303\0\303\0\303\0\u0b6d"+
    "\0\u0bae\0\u0bef\0\303\0\u0c30\0\u0c71\0\303\0\303\0\303"+
    "\0\303\0\303\0\u0cb2\0\u0cf3\0\303\0\303\0\303\0\303"+
    "\0\303\0\303\0\303\0\u0d34\0\u0d75\0\u0db6\0\u0df7\0\u0e38"+
    "\0\u0e79\0\u0eba\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe\0\u0fff\0\303"+
    "\0\u1040\0\u1081\0\u10c2\0\u1103\0\u1144\0\u1185\0\303\0\303"+
    "\0\u11c6\0\u1207\0\u1248\0\u1289\0\u12ca\0\303\0\303\0\303"+
    "\0\303\0\u0df7\0\u130b\0\303\0\303\0\303\0\303\0\303"+
    "\0\303\0\u134c\0\u138d\0\u13ce\0\303\0\u140f\0\303\0\u1450"+
    "\0\u0186\0\u1491\0\u14d2\0\u1513\0\u1554\0\u1595\0\u0186\0\u15d6"+
    "\0\u1617\0\u1658\0\u1699\0\u16da\0\u171b\0\u175c\0\u179d\0\u17de"+
    "\0\u181f\0\u1860\0\u18a1\0\u18e2\0\u1923\0\u1964\0\u19a5\0\u19e6"+
    "\0\u1a27\0\u1a68\0\u1aa9\0\303\0\u1aea\0\u1b2b\0\u1b6c\0\u1bad"+
    "\0\u1bee\0\u1c2f\0\u1c70\0\u1cb1\0\u1cf2\0\u1d33\0\u1d74\0\u1db5"+
    "\0\u1df6\0\u1e37\0\u1e78\0\u1eb9\0\u1efa\0\u1f3b\0\u1f7c\0\u1f7c"+
    "\0\u1fbd\0\u1ffe\0\u203f\0\u2080\0\u20c1\0\u2102\0\u2143";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[199];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\11\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\4\11\1\35\3\11\1\36"+
    "\2\11\1\37\1\40\1\41\1\42\3\11\1\43\4\11"+
    "\1\44\1\11\1\45\1\46\1\47\1\50\2\51\1\52"+
    "\2\51\1\53\1\51\1\54\50\51\1\55\20\51\2\56"+
    "\1\57\2\56\1\60\5\56\1\4\44\56\1\61\20\56"+
    "\103\0\1\6\2\0\1\6\134\0\1\62\47\0\1\11"+
    "\14\0\11\11\6\0\13\11\4\0\12\11\45\0\1\63"+
    "\51\0\1\64\26\0\1\65\41\0\1\66\2\0\1\67"+
    "\134\0\1\70\56\0\1\71\21\0\1\72\60\0\1\73"+
    "\4\0\1\74\12\0\1\75\63\0\12\76\61\0\1\77"+
    "\4\0\1\100\15\0\1\101\61\0\1\76\1\0\1\102"+
    "\1\103\2\104\4\105\2\106\10\0\1\107\1\110\1\111"+
    "\1\112\4\0\1\113\6\0\1\110\1\111\1\112\33\0"+
    "\1\76\1\0\12\26\10\0\1\107\1\110\1\111\1\112"+
    "\13\0\1\110\1\111\1\112\51\0\1\114\1\115\100\0"+
    "\1\116\100\0\1\117\1\120\46\0\1\11\14\0\11\11"+
    "\6\0\1\121\12\11\4\0\12\11\14\0\1\11\14\0"+
    "\11\11\6\0\6\11\1\122\4\11\4\0\12\11\45\0"+
    "\1\123\47\0\1\11\14\0\11\11\6\0\13\11\4\0"+
    "\1\124\11\11\14\0\1\11\14\0\11\11\6\0\13\11"+
    "\4\0\6\11\1\125\3\11\45\0\1\126\34\0\1\127"+
    "\2\0\2\51\1\0\2\51\1\0\1\51\1\0\50\51"+
    "\1\0\20\51\2\0\1\52\76\0\2\130\4\0\1\130"+
    "\1\131\3\130\1\132\10\130\4\133\4\134\24\130\1\135"+
    "\3\130\1\136\1\130\1\137\1\130\1\140\1\141\1\130"+
    "\1\142\5\130\13\0\1\143\67\0\1\57\76\0\2\130"+
    "\4\0\1\130\1\144\3\130\1\145\10\130\4\146\4\147"+
    "\24\130\1\150\3\130\1\151\1\130\1\152\1\130\1\153"+
    "\1\154\1\130\1\155\5\130\2\0\1\66\123\0\1\156"+
    "\77\0\12\76\10\0\1\107\1\110\1\111\14\0\1\110"+
    "\1\111\12\0\16\77\1\157\62\77\2\100\1\66\2\100"+
    "\1\67\73\100\22\0\1\76\1\0\1\102\1\103\2\104"+
    "\4\105\2\106\10\0\1\107\1\110\1\111\1\160\13\0"+
    "\1\110\1\111\1\160\33\0\1\76\1\0\10\105\2\106"+
    "\10\0\1\107\1\110\1\111\1\160\13\0\1\110\1\111"+
    "\1\160\33\0\1\76\1\0\10\161\2\106\10\0\1\107"+
    "\1\110\1\111\1\160\13\0\1\110\1\111\1\160\33\0"+
    "\1\76\1\0\10\162\2\106\10\0\1\107\1\110\1\111"+
    "\1\160\13\0\1\110\1\111\1\160\33\0\1\76\1\0"+
    "\12\106\10\0\1\107\1\110\1\111\14\0\1\110\1\111"+
    "\31\0\1\163\1\0\1\163\2\0\12\164\67\0\1\165"+
    "\11\166\6\0\5\166\12\0\4\166\53\0\1\167\100\0"+
    "\1\170\1\171\46\0\1\11\14\0\11\11\6\0\5\11"+
    "\1\172\5\11\4\0\12\11\14\0\1\11\14\0\11\11"+
    "\6\0\11\11\1\173\1\11\4\0\12\11\14\0\1\11"+
    "\14\0\11\11\6\0\13\11\4\0\4\11\1\174\5\11"+
    "\14\0\1\11\14\0\11\11\6\0\13\11\4\0\11\11"+
    "\1\175\30\0\10\134\71\0\10\176\60\0\1\177\100\0"+
    "\1\200\100\0\1\201\10\0\10\202\60\0\1\201\10\0"+
    "\10\203\60\0\1\204\100\0\1\205\100\0\1\206\100\0"+
    "\1\207\100\0\1\210\100\0\1\211\115\0\1\212\50\0"+
    "\16\77\1\157\4\77\1\66\55\77\22\0\1\76\1\0"+
    "\10\213\2\106\10\0\1\107\1\110\1\111\1\160\13\0"+
    "\1\110\1\111\1\160\33\0\1\76\1\0\10\214\2\106"+
    "\10\0\1\107\1\110\1\111\1\160\13\0\1\110\1\111"+
    "\1\160\35\0\12\164\67\0\12\164\10\0\1\107\1\0"+
    "\1\111\15\0\1\111\36\0\1\165\11\166\6\0\5\166"+
    "\1\215\11\0\4\166\1\215\35\0\12\216\6\0\5\216"+
    "\1\215\11\0\4\216\1\215\52\0\1\217\47\0\1\11"+
    "\14\0\11\11\6\0\7\11\1\220\3\11\4\0\12\11"+
    "\14\0\1\11\14\0\11\11\6\0\3\11\1\221\7\11"+
    "\4\0\12\11\14\0\1\11\14\0\11\11\6\0\13\11"+
    "\4\0\7\11\1\222\2\11\14\0\1\11\14\0\11\11"+
    "\6\0\13\11\4\0\2\11\1\221\7\11\17\0\1\201"+
    "\120\0\1\223\67\0\1\76\1\0\10\224\2\106\10\0"+
    "\1\107\1\110\1\111\1\160\13\0\1\110\1\111\1\160"+
    "\33\0\1\76\1\0\10\225\2\106\10\0\1\107\1\110"+
    "\1\111\1\160\13\0\1\110\1\111\1\160\35\0\12\226"+
    "\6\0\5\226\1\215\11\0\4\226\1\215\21\0\1\11"+
    "\14\0\11\11\6\0\3\11\1\227\7\11\4\0\12\11"+
    "\14\0\1\11\14\0\11\11\6\0\13\11\4\0\2\11"+
    "\1\227\7\11\34\0\1\230\72\0\1\76\1\0\10\231"+
    "\2\106\10\0\1\107\1\110\1\111\1\160\13\0\1\110"+
    "\1\111\1\160\33\0\1\76\1\0\10\232\2\106\10\0"+
    "\1\107\1\110\1\111\1\160\13\0\1\110\1\111\1\160"+
    "\35\0\12\233\6\0\5\233\1\215\11\0\4\233\1\215"+
    "\45\0\1\234\66\0\1\76\1\0\10\235\2\106\10\0"+
    "\1\107\1\110\1\111\1\160\13\0\1\110\1\111\1\160"+
    "\33\0\1\76\1\0\10\236\2\106\10\0\1\107\1\110"+
    "\1\111\1\160\13\0\1\110\1\111\1\160\35\0\12\237"+
    "\6\0\5\237\1\215\11\0\4\237\1\215\40\0\1\240"+
    "\73\0\1\76\1\0\10\241\2\106\10\0\1\107\1\110"+
    "\1\111\1\160\13\0\1\110\1\111\1\160\33\0\1\76"+
    "\1\0\10\242\2\106\10\0\1\107\1\110\1\111\1\160"+
    "\13\0\1\110\1\111\1\160\35\0\12\243\6\0\5\243"+
    "\1\215\11\0\4\243\1\215\43\0\1\244\70\0\1\76"+
    "\1\0\10\245\2\106\10\0\1\107\1\110\1\111\1\160"+
    "\13\0\1\110\1\111\1\160\33\0\1\76\1\0\10\246"+
    "\2\106\10\0\1\107\1\110\1\111\1\160\13\0\1\110"+
    "\1\111\1\160\35\0\12\247\6\0\5\247\1\215\11\0"+
    "\4\247\1\215\41\0\1\250\72\0\1\76\1\0\10\251"+
    "\2\106\10\0\1\107\1\110\1\111\1\160\13\0\1\110"+
    "\1\111\1\160\33\0\1\76\1\0\10\252\2\106\10\0"+
    "\1\107\1\110\1\111\1\160\13\0\1\110\1\111\1\160"+
    "\35\0\12\253\6\0\5\253\1\215\11\0\4\253\1\215"+
    "\45\0\1\254\66\0\1\76\1\0\10\255\2\106\10\0"+
    "\1\107\1\110\1\111\1\160\13\0\1\110\1\111\1\160"+
    "\33\0\1\76\1\0\10\256\2\106\10\0\1\107\1\110"+
    "\1\111\1\160\13\0\1\110\1\111\1\160\35\0\12\257"+
    "\6\0\5\257\1\215\11\0\4\257\1\215\33\0\1\76"+
    "\1\0\10\260\2\106\10\0\1\107\1\110\1\111\1\160"+
    "\13\0\1\110\1\111\1\160\33\0\1\76\1\0\10\261"+
    "\2\106\10\0\1\107\1\110\1\111\1\160\13\0\1\110"+
    "\1\111\1\160\35\0\12\262\6\0\5\262\1\215\11\0"+
    "\4\262\1\215\33\0\1\76\1\0\10\263\2\106\10\0"+
    "\1\107\1\110\1\111\1\160\13\0\1\110\1\111\1\160"+
    "\33\0\1\76\1\0\10\264\2\106\10\0\1\107\1\110"+
    "\1\111\1\160\13\0\1\110\1\111\1\160\35\0\12\265"+
    "\6\0\5\265\1\215\11\0\4\265\1\215\33\0\1\76"+
    "\1\0\10\266\2\106\10\0\1\107\1\110\1\111\1\160"+
    "\13\0\1\110\1\111\1\160\33\0\1\76\1\0\10\267"+
    "\2\106\10\0\1\107\1\110\1\111\1\160\13\0\1\110"+
    "\1\111\1\160\35\0\12\270\6\0\5\270\1\215\11\0"+
    "\4\270\1\215\33\0\1\76\1\0\10\271\2\106\10\0"+
    "\1\107\1\110\1\111\1\160\13\0\1\110\1\111\1\160"+
    "\33\0\1\76\1\0\10\272\2\106\10\0\1\107\1\110"+
    "\1\111\1\160\13\0\1\110\1\111\1\160\35\0\12\273"+
    "\6\0\5\273\1\215\11\0\4\273\1\215\33\0\1\76"+
    "\1\0\10\274\2\106\10\0\1\107\1\110\1\111\1\160"+
    "\13\0\1\110\1\111\1\160\33\0\1\76\1\0\10\275"+
    "\2\106\10\0\1\107\1\110\1\111\1\160\13\0\1\110"+
    "\1\111\1\160\35\0\12\276\6\0\5\276\1\215\11\0"+
    "\4\276\1\215\33\0\1\76\1\0\10\277\2\106\10\0"+
    "\1\107\1\110\1\111\1\160\13\0\1\110\1\111\1\160"+
    "\33\0\1\76\1\0\10\300\2\106\10\0\1\107\1\110"+
    "\1\111\1\160\13\0\1\110\1\111\1\160\35\0\12\301"+
    "\6\0\5\301\1\215\11\0\4\301\1\215\33\0\1\76"+
    "\1\0\10\302\2\106\10\0\1\107\1\110\1\111\1\160"+
    "\13\0\1\110\1\111\1\160\35\0\12\303\6\0\5\303"+
    "\1\215\11\0\4\303\1\215\33\0\1\76\1\0\10\304"+
    "\2\106\10\0\1\107\1\110\1\111\1\160\13\0\1\110"+
    "\1\111\1\160\62\0\1\215\15\0\1\215\33\0\1\76"+
    "\1\0\10\305\2\106\10\0\1\107\1\110\1\111\1\160"+
    "\13\0\1\110\1\111\1\160\33\0\1\76\1\0\10\306"+
    "\2\106\10\0\1\107\1\110\1\111\1\160\13\0\1\110"+
    "\1\111\1\160\33\0\1\76\1\0\10\307\2\106\10\0"+
    "\1\107\1\110\1\111\1\160\13\0\1\110\1\111\1\160"+
    "\33\0\1\76\1\0\12\106\10\0\1\107\1\110\1\111"+
    "\1\160\13\0\1\110\1\111\1\160\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8580];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\2\1\1\11\4\1\2\11\2\1\1\11"+
    "\5\1\2\11\3\1\1\11\2\1\1\11\1\1\1\11"+
    "\3\1\1\11\1\1\2\11\1\1\1\11\1\1\1\11"+
    "\2\1\1\11\2\1\5\11\1\1\4\11\1\0\1\11"+
    "\1\1\1\0\1\1\1\11\5\1\1\11\1\0\2\11"+
    "\1\0\1\1\3\11\3\1\1\11\2\1\5\11\2\1"+
    "\7\11\12\1\2\0\1\11\2\1\1\0\3\1\2\11"+
    "\5\1\4\11\2\0\6\11\1\0\2\1\1\11\1\1"+
    "\1\11\3\1\1\0\4\1\1\0\3\1\1\0\3\1"+
    "\1\0\3\1\1\0\3\1\1\0\3\1\1\11\2\1"+
    "\1\0\2\1\1\0\2\1\1\0\2\1\1\0\2\1"+
    "\1\0\2\1\1\0\2\1\1\0\1\1\1\0\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[199];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  private StringBuilder string = new StringBuilder();
  private int columnStringStart = 0;
  private long charStringStart = 0;
  private File parentFile = null;

  private LexSymbol symbol(int type) {
    return new LexSymbol(parentFile, type, yyline, yycolumn, yychar, yylength());
  }

  public LexSymbol next(){
      try{
          return next_token();
      }catch (Exception e){
          throw new RuntimeException(e);
      }
  }

  public boolean hasNext(){
      return !yyatEOF();
  }

  private LexSymbol symbol(int type, Object value) {
    return new LexSymbol(parentFile, type, yyline, yycolumn, yychar,yylength(), value);
  }

    private LexSymbol symbol(int type, int line, int column, long charPos, int size, Object value) {
      return new LexSymbol(parentFile, type, line, column, charPos, size, value);
    }

  public AssemblerScanner(java.io.Reader in, File parentFile) {
    this(in);
    this.parentFile = parentFile;
  }

  

  /**
   * assumes correct representation of a long value for
   * specified radix in scanner buffer from <code>start</code>
   * to <code>end</code>
   */
  private long parseLong(int start, int end, int radix) {
    long result = 0;
    long digit;

    for (int i = start; i < end; i++) {
      digit  = Character.digit(yycharat(i),radix);
      result*= radix;
      result+= digit;
    }

    return result;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AssemblerScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public LexSymbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return symbol(EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new RuntimeException("Illegal character \""+yytext()+
                                                              "\" at line "+(yyline + 1)+", column "+(yycolumn + 1));
            }
            // fall through
          case 90: break;
          case 2:
            { return symbol(WHITESPACE);
            }
            // fall through
          case 91: break;
          case 3:
            { return symbol(LINE_TERMINATOR);
            }
            // fall through
          case 92: break;
          case 4:
            { return symbol(NOT);
            }
            // fall through
          case 93: break;
          case 5:
            { yybegin(STRING); string.setLength(0); columnStringStart = yycolumn; charStringStart = yychar;
            }
            // fall through
          case 94: break;
          case 6:
            { return symbol(IDENTIFIER, yytext());
            }
            // fall through
          case 95: break;
          case 7:
            { return symbol(MOD);
            }
            // fall through
          case 96: break;
          case 8:
            { return symbol(AND);
            }
            // fall through
          case 97: break;
          case 9:
            { yybegin(CHARLITERAL);
            }
            // fall through
          case 98: break;
          case 10:
            { return symbol(LPAREN);
            }
            // fall through
          case 99: break;
          case 11:
            { return symbol(RPAREN);
            }
            // fall through
          case 100: break;
          case 12:
            { return symbol(MULT);
            }
            // fall through
          case 101: break;
          case 13:
            { return symbol(PLUS);
            }
            // fall through
          case 102: break;
          case 14:
            { return symbol(COMMA);
            }
            // fall through
          case 103: break;
          case 15:
            { return symbol(MINUS);
            }
            // fall through
          case 104: break;
          case 16:
            { return symbol(DOT);
            }
            // fall through
          case 105: break;
          case 17:
            { return symbol(DIV);
            }
            // fall through
          case 106: break;
          case 18:
            { return symbol(INTEGER_LITERAL, Integer.valueOf(yytext()));
            }
            // fall through
          case 107: break;
          case 19:
            { return symbol(COLON);
            }
            // fall through
          case 108: break;
          case 20:
            { return symbol(SEMICOLON);
            }
            // fall through
          case 109: break;
          case 21:
            { return symbol(LT);
            }
            // fall through
          case 110: break;
          case 22:
            { return symbol(EQ);
            }
            // fall through
          case 111: break;
          case 23:
            { return symbol(GT);
            }
            // fall through
          case 112: break;
          case 24:
            { return symbol(QUESTION);
            }
            // fall through
          case 113: break;
          case 25:
            { return symbol(LBRACK);
            }
            // fall through
          case 114: break;
          case 26:
            { return symbol(RBRACK);
            }
            // fall through
          case 115: break;
          case 27:
            { return symbol(XOR);
            }
            // fall through
          case 116: break;
          case 28:
            { return symbol(LBRACE);
            }
            // fall through
          case 117: break;
          case 29:
            { return symbol(OR);
            }
            // fall through
          case 118: break;
          case 30:
            { return symbol(RBRACE);
            }
            // fall through
          case 119: break;
          case 31:
            { return symbol(COMP);
            }
            // fall through
          case 120: break;
          case 32:
            { string.append( yytext() );
            }
            // fall through
          case 121: break;
          case 33:
            { throw new RuntimeException("Unterminated string at end of line");
            }
            // fall through
          case 122: break;
          case 34:
            { yybegin(YYINITIAL); return symbol(STRING_LITERAL, yyline, columnStringStart, charStringStart, yycolumn - columnStringStart + 1 , string.toString());
            }
            // fall through
          case 123: break;
          case 35:
            { throw new RuntimeException("Unterminated character literal at end of line");
            }
            // fall through
          case 124: break;
          case 36:
            { return symbol(NOTEQ);
            }
            // fall through
          case 125: break;
          case 37:
            { return symbol(MODEQ);
            }
            // fall through
          case 126: break;
          case 38:
            { return symbol(ANDAND);
            }
            // fall through
          case 127: break;
          case 39:
            { return symbol(ANDEQ);
            }
            // fall through
          case 128: break;
          case 40:
            { /* ignore */
            }
            // fall through
          case 129: break;
          case 41:
            { return symbol(MULTEQ);
            }
            // fall through
          case 130: break;
          case 42:
            { return symbol(PLUSPLUS);
            }
            // fall through
          case 131: break;
          case 43:
            { return symbol(PLUSEQ);
            }
            // fall through
          case 132: break;
          case 44:
            { return symbol(MINUSMINUS);
            }
            // fall through
          case 133: break;
          case 45:
            { return symbol(MINUSEQ);
            }
            // fall through
          case 134: break;
          case 46:
            { return symbol(FLOATING_POINT_LITERAL, new Double(yytext()));
            }
            // fall through
          case 135: break;
          case 47:
            { return symbol(DIVEQ);
            }
            // fall through
          case 136: break;
          case 48:
            { return symbol(INTEGER_LITERAL, Integer.valueOf((int) parseLong(0, yylength(), 8)));
            }
            // fall through
          case 137: break;
          case 49:
            { return symbol(FLOATING_POINT_LITERAL, new Double(yytext().substring(0,yylength()-1)));
            }
            // fall through
          case 138: break;
          case 50:
            { return symbol(FLOATING_POINT_LITERAL, new Float(yytext().substring(0,yylength()-1)));
            }
            // fall through
          case 139: break;
          case 51:
            { return symbol(INTEGER_LITERAL, new Long(yytext().substring(0,yylength()-1)));
            }
            // fall through
          case 140: break;
          case 52:
            { return symbol(LSHIFT);
            }
            // fall through
          case 141: break;
          case 53:
            { return symbol(LTEQ);
            }
            // fall through
          case 142: break;
          case 54:
            { return symbol(EQEQ);
            }
            // fall through
          case 143: break;
          case 55:
            { return symbol(GTEQ);
            }
            // fall through
          case 144: break;
          case 56:
            { return symbol(RSHIFT);
            }
            // fall through
          case 145: break;
          case 57:
            { return symbol(XOREQ);
            }
            // fall through
          case 146: break;
          case 58:
            { return symbol(OREQ);
            }
            // fall through
          case 147: break;
          case 59:
            { return symbol(OROR);
            }
            // fall through
          case 148: break;
          case 60:
            { throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
            }
            // fall through
          case 149: break;
          case 61:
            { string.append( '\"' );
            }
            // fall through
          case 150: break;
          case 62:
            { string.append( '\'' );
            }
            // fall through
          case 151: break;
          case 63:
            { char val = (char) Integer.parseInt(yytext().substring(1),8);
                        				   string.append( val );
            }
            // fall through
          case 152: break;
          case 64:
            { string.append( '\\' );
            }
            // fall through
          case 153: break;
          case 65:
            { string.append( '\b' );
            }
            // fall through
          case 154: break;
          case 66:
            { string.append( '\f' );
            }
            // fall through
          case 155: break;
          case 67:
            { string.append( '\n' );
            }
            // fall through
          case 156: break;
          case 68:
            { string.append( '\r' );
            }
            // fall through
          case 157: break;
          case 69:
            { string.append( '\t' );
            }
            // fall through
          case 158: break;
          case 70:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, yyline, yycolumn - 1, yychar - 1, yylength() + 1, yytext().charAt(0));
            }
            // fall through
          case 159: break;
          case 71:
            { return symbol(INTEGER_LITERAL, new Long(parseLong(0, yylength()-1, 8)));
            }
            // fall through
          case 160: break;
          case 72:
            { return symbol(INTEGER_LITERAL, Integer.valueOf((int) parseLong(2, yylength(), 16)));
            }
            // fall through
          case 161: break;
          case 73:
            { return symbol(LSHIFTEQ);
            }
            // fall through
          case 162: break;
          case 74:
            { return symbol(RSHIFTEQ);
            }
            // fall through
          case 163: break;
          case 75:
            { return symbol(URSHIFT);
            }
            // fall through
          case 164: break;
          case 76:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, yyline, yycolumn - 1, yychar - 1, yylength() + 1, '\"');
            }
            // fall through
          case 165: break;
          case 77:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, yyline, yycolumn - 1, yychar - 1, yylength() + 1, '\'');
            }
            // fall through
          case 166: break;
          case 78:
            { yybegin(YYINITIAL);
			                              int val = Integer.parseInt(yytext().substring(1,yylength()-1),8);
			                            return symbol(CHARACTER_LITERAL, yyline, yycolumn - 1, yychar - 1, yylength() + 1, (char)val);
            }
            // fall through
          case 167: break;
          case 79:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, yyline, yycolumn - 1, yychar - 1, yylength() + 1, '\\');
            }
            // fall through
          case 168: break;
          case 80:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, yyline, yycolumn - 1, yychar - 1, yylength() + 1, '\b');
            }
            // fall through
          case 169: break;
          case 81:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, yyline, yycolumn - 1, yychar - 1, yylength() + 1, '\f');
            }
            // fall through
          case 170: break;
          case 82:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, yyline, yycolumn - 1, yychar - 1, yylength() + 1, '\n');
            }
            // fall through
          case 171: break;
          case 83:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, yyline, yycolumn - 1, yychar - 1, yylength() + 1, '\r');
            }
            // fall through
          case 172: break;
          case 84:
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, yyline, yycolumn - 1, yychar - 1, yylength() + 1, '\t');
            }
            // fall through
          case 173: break;
          case 85:
            { return symbol(INTEGER_LITERAL, new Long(parseLong(2, yylength()-1, 16)));
            }
            // fall through
          case 174: break;
          case 86:
            { return symbol(URSHIFTEQ);
            }
            // fall through
          case 175: break;
          case 87:
            { return symbol(BOOLEAN_LITERAL, true);
            }
            // fall through
          case 176: break;
          case 88:
            { return symbol(BOOLEAN_LITERAL, false);
            }
            // fall through
          case 177: break;
          case 89:
            { return symbol(INTEGER_LITERAL, Integer.valueOf(Integer.MIN_VALUE));
            }
            // fall through
          case 178: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
